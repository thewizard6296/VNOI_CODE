#include<algorithm>
#define FOR(i, a, b) for(int i=(a), _b=(b); i < _b; ++i)
#define FORE(i, a, b) for(int i=(a), _b=(b); i <= _b; ++i)
#define FORD(i, a, b) for(int i=(a), _b=(b); i >= _b; --i)
#define MP(a, b) make_pair(a, b)
using namespace std;
const int DBG = 0;
const int HOME = 0;
const int MAXN = 10;
 
int n, c;
int res[] = {0, 0, 2, 2, 4, 96, 1024, 2880, 81024, 770144};
int a[2*MAXN], x[2*MAXN];
int ok[2*MAXN][2*MAXN];
 
bool isPrime(int n){
   if(n <= 1) return false;
   for(int i = 2; i*i <= n; i++)
      if(n%i == 0) return false;
   return true;
}
 
void find(int k){
   if(k==n){
      if(!ok[ a[0] ][ a[n-1] ]) return;
      c++;
      FOR(i, 0, n) printf("%d%c", a[i], i==n-1 ? '\n' : ' ');
      return;
   }
   FOR(i, 1, n+1) if(!x[i] && ok[a[k-1]][i]){
      a[k] = i;
      x[i] = 1;
      find(k+1);
      if(c==10000) return;
      x[i] = 0;
   }
}
 
int main(){
   if(HOME){
      freopen("pcircle.inp", "r", stdin);
      freopen("pcircle.out", "w", stdout);
   }
   scanf("%d", &n);
   printf("%d\n", res[n]);
   n += n;
   FOR(i, 1, n+1) FOR(j, 1, n+1) ok[i][j] = isPrime(i+j);
   memset(x, 0, sizeof x);
   a[0] = 1; x[1] = 1;
   find(1);
   return 0;
}
