#include<algorithm>
using namespace std;
#define FOR(i, a, b) for(int i=(a), _b=(b); i < _b; ++i)
#define FORE(i, a, b) for(int i=(a), _b=(b); i <= _b; ++i)
#define FORD(i, a, b) for(int i=(a), _b=(b); i >= _b; --i)
#define PB(a) push_back(a)
#define TR(c, it) for(typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
 
const int DBG = 0;
const int HOME = 0;
const int MAXN = 510;
const int INF = 5000001;
 
int n, m, lim;
int isf[MAXN], x[MAXN], d[MAXN];
int c[MAXN][MAXN];
int p[MAXN][MAXN];
 
void dijk(){
   fill(x, x+n, 1);
   fill(d, d+n, INF);
   d[0] = 0;
   while(x[n-1]){
      int u, dmin = INF;
      FOR(i, 0, n) if(x[i] && d[i] < dmin) u=i, dmin = d[i];
      x[u] = 0;
      FOR(v, 0, n)
         if(x[v]) d[v] <?= dmin+c[u][v];
   }
}
 
bool DFS(int u, int lastp){
   if(lastp > lim) return 0;
   if(DBG) printf("\tFrom %d cost %d\n", u+1, lastp);
   if(u == n-1) return 1;
   if(isf[u]) lastp = 0;
   FOR(v, 0, n) if(d[u]+c[u][v]==d[v]){
      if(DBG) printf("\t\tFound %d\n", v+1);
      if(DFS(v, lastp+p[u][v])) return 1;
   }
 
   return 0;
}
 
int main(){
   if(HOME){
      freopen("QBROBOT.inp", "r", stdin);
      freopen("QBROBOT.out", "w", stdout);
   }
 
   scanf("%d", &n);
   FOR(i, 0, n) scanf("%d", isf+i);
   scanf("%d", &m);
 
   FOR(i, 0, n) FOR(j, 0, n) c[i][j] = p[i][j] = INF;   
   FOR(i, 0, m){
      int u, v, t, f;
      scanf("%d %d %d %d", &u, &v, &t, &f);
      u--; v--;
      c[u][v] = c[v][u] = t;
      p[u][v] = p[v][u] = f;
   }
 
   dijk();
   if(DBG) printf("%d\n", d[n-1]);
 
   int l = 1, r = INF;
   isf[0] = isf[n-1] = 1;
   while(l < r){
      lim = (l+r)/2;
      if(DBG) printf("Check limit %d\n", lim);
      if(DFS(0, 0)) r = lim;
      else l = lim+1;
   }
 
   printf("%d\n", l);
 
   return 0;
}
