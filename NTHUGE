// NTHUGE
const
   ip='nthuge.in';
   op='nthuge.out';
   max=32;
   maxt=100000;
   oo=-100000000000000000;

type int=int64;

var
   n,i,m,leng,bit,new,tmp:longint;

   l,r,res,s,cost:int;

   w,v:array[1..max] of int;

   f,c,a:array[0..maxt] of int;

   tree:array[1..maxt shl 2+1] of int;

function fmax(x,y:int):int;

   begin

      if x>y then exit(x);
      exit(y);

   end;

function GetBit(i,x:longint):longint;

   begin

      exit((x shr (i-1))and 1);

   end;

procedure Sort(l,r:longint);

          var
            i,j:longint;
            x,y:int;

          begin

               i:=l;j:=r;x:=f[(l+r)shr 1];

               repeat

                     while f[i]<x do inc(i);
                     while x<f[j] do dec(j);

                     if i<=j then
                        begin
                             y:=f[i];f[i]:=f[j];f[j]:=y;
                             y:=c[i];c[i]:=c[j];c[j]:=y;
                             inc(i);dec(j);
                        end;

               until i>j;

               if l<j then Sort(l,j);
               if i<r then Sort(i,r);

          end;

procedure Up(p,l,r:longint;w,h:int);

   var m,c:longint;

   begin

      if a[l]>w then exit;
      if a[r]<w then exit;

      if l=r then
         begin
            if tree[p]<h then tree[p]:=h;
            exit;
         end;

      m:=(l+r)shr 1;
      c:=p shl 1;

      Up(c,l,m,w,h);
      Up(c+1,m+1,r,w,h);

      tree[p]:=fmax(tree[c],tree[c+1]);

   end;

function Find(p,l,r:longint;u,v:int):int;

   var m,c:longint;

   begin

      if u>a[r] then exit(oo);
      if v<a[l] then exit(oo);

      if (u<=a[l])and(a[r]<=v) then exit(tree[p]);

      m:=(l+r)shr 1;
      c:=p shl 1;

      exit(fmax(Find(c,l,m,u,v),Find(c+1,m+1,r,u,v)));

   end;

begin

//assign(input,ip);reset(input);
//assign(output,op);rewrite(output);

readln(n,l,r);

leng:=n shr 1;

m:=1 shl leng-1;

for i:=1 to n do readln(w[i],v[i]);

for i:=0 to m do
   begin

      for bit:=1 to leng do
         if GetBit(bit,i)=1 then
            begin
               f[i]:=f[i]+w[bit];
               c[i]:=c[i]+v[bit];
            end;

   end;

//------------

Sort(0,m);

tmp:=m;

m:=1;

a[1]:=f[0];

for i:=1 to tmp do
   if f[i]<>f[i-1] then
      begin
         inc(m);
         a[m]:=f[i];
      end;

for i:=0 to tmp do Up(1,1,m,f[i],c[i]);

//------------

tmp:=leng;

leng:=n-leng;
new:=1 shl leng-1;

for i:=0 to new do
   begin

      s:=0;cost:=0;

      for bit:=1 to leng do
         if GetBit(bit,i)=1 then
            begin
               s:=s+w[bit+tmp];
               cost:=cost+v[bit+tmp];
            end;

      res:=fmax(res,cost+Find(1,1,m,l-s,r-s));

   end;

write(res);

//close(input);close(output);

end.
