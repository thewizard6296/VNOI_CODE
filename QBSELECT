#include<algorithm>
#include<vector>
using namespace std;
#define FOR(i, a, b) for(int i=(a), _b=(b); i < _b; ++i)
#define FORE(i, a, b) for(int i=(a), _b=(b); i <= _b; ++i)
#define FORD(i, a, b) for(int i=(a), _b=(b); i >= _b; --i)
#define PB(a) push_back(a)
#define TR(c, it) for(typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int, int> II;
typedef pair<int, II> III;
typedef vector<II> VII;
typedef vector<VII> VVII;
typedef long long LL;
 
const int DBG = 0;
const int HOME = 0;
const int MAXN = 10010;
const int INF = 1000000001;
const int NS = 8;
int state[] = {0, 1, 2, 4, 5, 8, 9, 10};
 
int n;
 
VVI rel(NS);
int a[4][MAXN];
LL f[MAXN][NS];
 
bool valid(int s){
   int x = 0;
   FOR(i, 0, 4){
      if(x && s&1) return false;
      x = s&1; s >>= 1;
   }
   return true;
}
 
inline int sum(int col, int s){
   int t = 0;
   FOR(i, 0, 4){
      if(s&1) t += a[i][col];
      s >>= 1;
   }
   return t;
}
 
int main(){
   if(HOME){
      freopen("QBSELECT.inp", "r", stdin);
      freopen("QBSELECT.out", "w", stdout);
   }
 
   FOR(i, 0, NS){
      FOR(j, i, NS) if(!(state[i] & state[j])){
         rel[i].PB(j); rel[j].PB(i);
      }
   }
 
   LL res = LL(-INF);
 
   if(DBG) printf("%I64d\n", res);
 
   scanf("%d", &n);
   FOR(i, 0, 4) FOR(j, 0, n){
      scanf("%d", &a[i][j]);
      res >?= LL(a[i][j]);
   }
 
   if(DBG) printf("%I64d\n", res);
 
   if(res < 0ll){
      if(HOME) printf("%I64d\n", res);
      else printf("%lld\n", res);
      return 0;
   }
 
   FOR(is, 0, NS) f[0][is] = LL(sum(0, state[is]));
 
   FOR(col, 1, n) FOR(is, 0, NS){
      LL hi = 0ll;
      TR(rel[is], it) hi >?= f[col-1][*it];
      f[col][is] = hi+LL(sum(col, state[is]));
   }
 
   FOR(s, 0, NS) res >?= f[n-1][s];
 
   if(HOME) printf("%I64d\n", res);
   else printf("%lld\n", res);
 
   return 0;
}
