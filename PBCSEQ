using namespace std;
#include<algorithm>
#include<vector>
#include<list>
#include<map>
#include<set>
#include<queue>
#include<stack>
#include<cmath>
#include<cassert>
#define FOR(i, a, b) for(int i=(a), _b=(b); i < _b; ++i)
#define FORE(i, a, b) for(int i=(a), _b=(b); i <= _b; ++i)
#define FORD(i, a, b) for(int i=(a), _b=(b); i >= _b; --i)
#define MP make_pair
#define PB push_back
#define TR(c, it) for(typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
 
typedef pair<int, int> II;
typedef vector<int> VI;
typedef vector<II> VII;
typedef vector<VI> VVI;
typedef vector<VII> VVII;
 
const int DBG = 0;
const int HOME = 0;
const int MAXN = 10+100000;
const int INF = 1000000001;
 
struct seg{
   int x, y;
   bool operator<(const seg b) const{
      return x>b.x || (x==b.x && y<b.y);
   }
};
 
int n;
int f[MAXN], a[MAXN];
seg s[MAXN];
 
 
int main(){
   if(HOME){
      freopen("PBCSEQ.inp", "r", stdin);
      freopen("PBCSEQ.out", "w", stdout);
   }
 
   scanf("%d", &n);
   FOR(i, 0, n) scanf("%d %d", &s[i].x, &s[i].y);
   sort(s, s+n);
 
   if(DBG) FOR(i, 0, n) printf("%4d %4d\n", s[i].x, s[i].y);
 
   FOR(i, 0, n) a[i] = s[i].y;
   f[0] = 0;
   FOR(i, 1, n+1) f[i] = INF;
 
   int l, r, mid, res = 0;
   FORE(i, 0, n){
      l = 0, r = res;
      while(l < r){
         mid = (l+r+1)/2;
         if(f[mid] <= a[i]) l = mid;
         else r = mid-1;
      }
      f[l+1] <?= a[i]; res >?= l+1;
   }
 
   printf("%d\n", res);
 
   return 0;
}
