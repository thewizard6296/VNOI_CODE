#include<algorithm>
#include<vector>
#include<queue>
using namespace std;
#define FOR(i, a, b) for(int i=(a), _b=(b); i < _b; ++i)
#define FORE(i, a, b) for(int i=(a), _b=(b); i <= _b; ++i)
#define FORD(i, a, b) for(int i=(a), _b=(b); i >= _b; --i)
#define PB(a) push_back(a)
#define TR(c, it) for(typeof((c).begin()) it=(c).begin(); it!=(c).end(); it++)
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef pair<int, int> II;
typedef pair<int, II> III;
typedef vector<II> VII;
typedef vector<VII> VVII;
 
const int DBG = 0;
const int HOME = 0;
const int MAXN = 210;
const int INF = 1000000001;
 
int n, m, sr, sc, fr, fc;
int a[MAXN][MAXN];
queue<int> q;
 
int main(){
   if(HOME){
      freopen("QBBISHOP.inp", "r", stdin);
      freopen("QBBISHOP.out", "w", stdout);
   }
 
   scanf("%d %d %d %d %d %d", &n, &m, &sr, &sc, &fr, &fc);
   FOR(i, 0, n+2) FOR(j, 0, n+2)
      a[i][j] = (i==0 || j==0 || i==n+1 || j==n+1) ? -1 : INF;
 
   int u, v, u1, v1, d;
   FOR(i, 0, m){
      scanf("%d %d", &u, &v);
      a[u][v] = -1;
   }
 
   a[sr][sc] = 0;
   q.push(sr); q.push(sc);
   while(!q.empty()){
      u1 = q.front(); q.pop();
      v1 = q.front(); q.pop();
      d = a[u1][v1]+1;
 
      for(u = u1-1, v = v1-1; a[u][v]!=-1; u--, v--) if(a[u][v]>d){
         a[u][v]=d;
         q.push(u); q.push(v);
      }
      for(u = u1-1, v = v1+1; a[u][v]!=-1; u--, v++) if(a[u][v]>d){
         a[u][v]=d;
         q.push(u); q.push(v);
      }
 
      for(u = u1+1, v = v1-1; a[u][v]!=-1; u++, v--) if(a[u][v]>d){
         a[u][v]=d;
         q.push(u); q.push(v);
      }
      for(u = u1+1, v = v1+1; a[u][v]!=-1; u++, v++) if(a[u][v]>d){
         a[u][v]=d;
         q.push(u); q.push(v);
      }
   }
 
   if(DBG){
      FORE(i, 1, n) FORE(j, 1, n) printf("%2d%c", a[i][j], j==n?'\n':' ');
   }
 
   printf("%d\n", a[fr][fc]==INF?-1:a[fr][fc]);
 
   return 0;
}
